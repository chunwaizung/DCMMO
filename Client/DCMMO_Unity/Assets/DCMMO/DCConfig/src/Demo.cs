// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace table
{
	
	

	// Defined in table: Demo
	
	public partial class Demo
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// NPC
		/// </summary>
		public List<NPCDefine> NPC = new List<NPCDefine>(); 
	
	
		#region Index code
	 	Dictionary<string, NPCDefine> _NPCByName = new Dictionary<string, NPCDefine>();
        public NPCDefine GetNPCByName(string Name, NPCDefine def = default(NPCDefine))
        {
            NPCDefine ret;
            if ( _NPCByName.TryGetValue( Name, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(NPCDefine) )
			{
				TableLogger.ErrorLine("GetNPCByName failed, Name: {0}", Name);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Demo> _DemoDeserializeHandler;
		static tabtoy.DeserializeHandler<Demo> DemoDeserializeHandler
		{
			get
			{
				if (_DemoDeserializeHandler == null )
				{
					_DemoDeserializeHandler = new tabtoy.DeserializeHandler<Demo>(Deserialize);
				}

				return _DemoDeserializeHandler;
			}
		}
		public static void Deserialize( Demo ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.NPC.Add( reader.ReadStruct<NPCDefine>(NPCDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build NPC Index
			for( int i = 0;i< ins.NPC.Count;i++)
			{
				var element = ins.NPC[i];
				
				ins._NPCByName.Add(element.Name, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<NPCDefine> _NPCDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<NPCDefine> NPCDefineDeserializeHandler
		{
			get
			{
				if (_NPCDefineDeserializeHandler == null )
				{
					_NPCDefineDeserializeHandler = new tabtoy.DeserializeHandler<NPCDefine>(Deserialize);
				}

				return _NPCDefineDeserializeHandler;
			}
		}
		public static void Deserialize( NPCDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.HP = reader.ReadFloat();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.Skills.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: NPC
	[System.Serializable]
	public partial class NPCDefine
	{
	
		
		/// <summary> 
		/// ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 血量上限
		/// </summary>
		public float HP = 0f; 
		
		/// <summary> 
		/// 技能列表
		/// </summary>
		public List<int> Skills = new List<int>(); 
	
	

	} 

}
